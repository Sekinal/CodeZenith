import re
from pygments.lexers import get_lexer_by_name
from pygments.util import ClassNotFound
import os

def extract_code_block(message):
    """
    Extracts the first code block from a message generated by GPT-3.5-Turbo or GPT-4.
    If no code block is found, returns None for both the code and the language.

    Args:
    - message: string containing the GPT-3.5-Turbo or GPT-4 generated message

    Returns:
    - code: string containing the code block found in the message
    - language: string containing the language name found in the code block, or None if not found
    """
    # Regular expression pattern to match code blocks with language hint
    pattern = r"```(\w+)\n([\s\S]*?)```"

    # Look for the first code block in the message
    match = re.search(pattern, message)

    if match:
        # Extract the code and the language from the match object
        language = match.group(1)
        code = match.group(2)
        return code, language
    else:
        return None, None
    
def get_file_extension(language):
    """
    Get the file extension for a given programming language.

    Parameters:
    language (str): The name of the programming language.

    Returns:
    str: The file extension for the given programming language, or None if no match is found.
    """
    try:
        lexer = get_lexer_by_name(language)
        return lexer.filename
    except ClassNotFound:
        return None

def generate_code_file(code, language):
    """
    Generate a new file with the correct file extension (case insensitive) and paste the generated code.

    Parameters:
    code (str): The formatted code string to be pasted into the new file.
    language (str): The name of the programming language.

    Returns:
    None
    """
    # If no code or language is given, print a message and return
    if code is None and language is None:
        print("No code was generated.")
        return

    # Get the file extension for the given programming language
    extension = get_file_extension(language)

    # If no file extension could be found, print a message and return
    if extension is None:
        print(f"No file extension found for language '{language}'.")
        return

    # Write the code to a new file with the appropriate file extension
    file_name = f"generated_code.{extension}"
    with open(file_name, "w") as f:
        f.write(code)

    print(f"Code generated and saved to file '{os.path.abspath(file_name)}'.")